1.怎样实现多线程共享一个数据
	1.将数据设置为静态的(不推荐，有局限性)
	2.实现Runnable接口  创建多个线程  但只创建一个数据对象  多个线程操作一个对象  再同时开启多个线程
	
2.线程安全问题 ：

 * 	1.多个线程在操作共享的的数据
 
 * 	2.操作贡献数据的线程代码有多条
 
	 当一个线程在执行操作共享数据的多条代码时，其他线程参与了运算就会导致线程安全问题的产生。
	 
3. 解决思路：

 * 3.1将多条操作共享数据的线程代码封装起来，当有线程在执行这些代码时，其他线程时不可以参与运算的，必须要当前线程把这些代码都执行完毕之后，其他线程才可以参与运算
 * 
	 在java中用同步就可以解决这个问题 
	
4.同步的形式：
 	4.1同步代码块
	 * synchronized(对象){  这个对象就是执行同步代码块的锁
	 * 	需要被同步的代码;
	 * }
	 
	 实例：
	 	synchronized(obj){
			if(num>0){
				try{
					Thread.sleep(10);
				}catch(InterruptedException e){}
				System.out.println(Thread.currentThread().getName()+"...sale.."+num--);
			}
		}
	4.2同步函数
		格式：用synchronized 来修饰函数
		
		锁：this
		
		4.2.1静态同步函数
		
		锁：该函数所属的字节码文件对象     可以用this.getClass()或者 当前类名.class   形式表示
		
	4.3如何判断是否线程安全？
		1.有没有共享数据
 	    2.操作共享数据代码有多条
 	    
	同步的好处：解决线程安全问题
		弊端：相对降低了效率  因为同步外 的线程都会判断同步锁
	
	同步的前提：同步中必须有多个线程并使用同一个锁！！！
	
-------------------------------------------------------------------------------------------------------

5.多线程下的单例模式

	5.1饿汉式    
		实例：
			private static final Single s=new Single(); 唯一的static对象
			private Single(){};  私有构造函数
			
			public static Single getInstance(){  利用公共接口返回  唯一的对象成员
				return s;
			}
		总结 ：饿汉式没有太大的线程安全问题  原因：1.执行代码只有一句
	
	5.2懒汉式
		实例：
			private static Single1 f=null;
			private Single1(){}
			public static Single1 getInstance(){
				if(f==null)
					f=new Single1();
				return f;
			}
			
		懒汉式具有线程安全问题   有线程有共享数据  而且执行代码有多句
		解决办法：
			阶段一：
				将getInstance方法设置为同步函数  但是性能减弱了
			阶段二：
				将if(f==null)  f=new Single1();放在同步代码块中  
				然后在外层加入一层  if(f==null)判断   保证除了有两个线程需要进行同步之外  其余的都无需再同步   
				
				优点：提高性能  

6.死锁   DeadLock
	出现死锁的情况：两个线程  互不相让  都拿着对方的锁




















