-------------------------wait 与 sleep -------------------------

wait与sleep的区别
	1.wait 可以指定时间也可以不指定。
	  sleep必须指定时间
	  
	2.在同步中时，对于CPU的执行权和锁的处理不同
	  wait:释放执行权 ，释放锁
	  sleep：释放执行权，不释放锁
	  
	class Demo{
		
		public void set(){
			synchronized(this){ //t0 t1 t2 
				wait();  //t0 t1 t2
			}
		}
		
		public void method(){
			synchronized(this){ //t4
				notifyAll();  
				//t4   这时 t0 t1 t2全活了   但三个线程都在同步代码块中   有点纠结  不是同步时只能有一个线程进入吗  违背了常理  
				 但是注意 ：只有具有钥匙的线程才能具有执行权
			}
		}
		
	}
	
-------------------------停止线程-------------------------------
怎么停止线程？
	1.stop方法
	2.run方法结束
	
怎么控制线程的任务结束呢？
	在任务中都会有循环结构，只要控制住循环就可以结束任务
	
	控制循环通常就用定义标记来完成  
	
	但是 如果多线程全被wait了  只能用 interrupte来使线程拉回来  使其具有执行资格  
	
	
-----------------------Thread.setDaemon()方法----------------------------
作用：将一个线程变成保护线程(后台线程)  前台线程需要手动停止    而后台线程会随着前台线程的结束而结束


提高线程获得cpu执行权的几率
几率范围  1~10   
Thread线程类中的静态变量:
	1.  MAX_PRIORITY  10
	2.  MIN_PRIORITY  1 
	3.  NORM_PRIORITY  默认为5


Thread.setPriority(Thread.MAXPRIORITY);









